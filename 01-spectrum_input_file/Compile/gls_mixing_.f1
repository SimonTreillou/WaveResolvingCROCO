!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================

!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!

  

  









!# define WAVE_MAKER_FILE





!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA,
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!

  


  


  



  



  



  



  



  



  



  













  



  



  



  



  











  





  



  



  











  







  



  









  



  



  



  



  



  



  











  



  





  



  


  



  





  















  







  




  



  





!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!

  


  









  



  



  



  



  




            



                                             

!



  





  



  



  

!-# define float dfloat
!-# define FLoaT dfloat
!-# define FLOAT dfloat
!-# define sqrt dsqrt
!-# define SQRT dsqrt
!-# define exp dexp
!-# define EXP dexp
!-# define dtanh dtanh
!-# define TANH dtanh



  



  




  










!
!=======================================================================

      SUBROUTINE gls_mixing (tile)

!=======================================================================
!
      IMPLICIT NONE
      INTEGER         :: tile, trd
      INTEGER         :: omp_get_thread_num

!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!
!----------------------------------------------------------------------
! Dimensions of Physical Grid and array dimensions
!----------------------------------------------------------------------
!
! LLm,MMm  Number of the internal points of the PHYSICAL grid.
!          in the XI- and ETA-directions [physical side boundary
!          points and peroodic ghost points (if any) are excluded].
!
! Lm,Mm    Number of the internal points [see above] of array
!          covering a Message Passing subdomain. In the case when
!          no Message Passing partitioning is used, these two are
!          the same as LLm,MMm.
!
! N        Number of vertical levels.
!
      integer  LLm,Lm,MMm,Mm,N, LLm0,MMm0

      parameter (LLm0=200,  MMm0=200,  N=8 )   !  1.5 m resolution



      parameter (LLm=LLm0,  MMm=MMm0)


!
!----------------------------------------------------------------------
! Number of layers in Sediment (SL)
!----------------------------------------------------------------------
!
      integer N_sl
      !parameter (N_sl=40)
      parameter (N_sl=0)

!
!----------------------------------------------------------------------
!  related variables
!----------------------------------------------------------------------
!
      integer Lmmpi,Mmmpi,iminmpi,imaxmpi,jminmpi,jmaxmpi
      common /comm_setup_mpi1/ Lmmpi,Mmmpi
      common /comm_setup_mpi2/ iminmpi,imaxmpi,jminmpi,jmaxmpi
!
! Domain subdivision parameters
! ====== =========== ==========
!
! NPP            Maximum allowed number of parallel threads;
! NSUB_X,NSUB_E  Number of SHARED memory subdomains in XI- and
!                                                ETA-directions;
! NNODES        Total number of  processes (nodes);
! NP_XI,NP_ETA  Number of  subdomains in XI- and ETA-directions;
!
      integer NSUB_X, NSUB_E, NPP

      integer NP_XI, NP_ETA, NNODES

      parameter (NP_XI=1,  NP_ETA=4,  NNODES=NP_XI*NP_ETA)

      parameter (NPP=1)
      parameter (NSUB_X=1, NSUB_E=1)


!
!----------------------------------------------------------------------
! Number maximum of weights for the barotropic mode
!----------------------------------------------------------------------
!
      integer NWEIGHT
      parameter (NWEIGHT=1000)

!
!----------------------------------------------------------------------
! Tides
!----------------------------------------------------------------------
!

!
!----------------------------------------------------------------------
! Wetting-Drying
!----------------------------------------------------------------------
!

      real D_wetdry             ! Critical Depth for Drying cells
                                ! ======== ===== === ====== =====

      parameter (D_wetdry=0.05)

!
!----------------------------------------------------------------------
! Minimum water depth above which wave forcing is applied
! (D_wavedry>D_wetdry if  is activated)
!----------------------------------------------------------------------

!
!----------------------------------------------------------------------
! Point sources, Floast, Stations
!----------------------------------------------------------------------
!


!
!----------------------------------------------------------------------
! Derived dimension parameters
!----------------------------------------------------------------------
!
      integer stdout, Np, NpHz, padd_X,padd_E

      parameter (stdout=6)

      parameter (Np=N+1)
      parameter (NpHz=(N+1+N_sl))

      parameter (Lm=(LLm+NP_XI-1)/NP_XI, Mm=(MMm+NP_ETA-1)/NP_ETA)

      parameter (padd_X=(Lm+2)/2-(Lm+1)/2)
      parameter (padd_E=(Mm+2)/2-(Mm+1)/2)



      integer NSA, N2d,N3d,N3dHz, size_XI,size_ETA
      integer se,sse, sz,ssz

      parameter (NSA=35)

      parameter (size_XI=7+(Lm+NSUB_X-1)/NSUB_X)
      parameter (size_ETA=7+(Mm+NSUB_E-1)/NSUB_E)

      parameter (sse=size_ETA/Np, ssz=Np/size_ETA)
      parameter (se=sse/(sse+ssz), sz=1-se)
      parameter (N2d=size_XI*(se*size_ETA+sz*Np))
      parameter (N3d=size_XI*size_ETA*Np)
      parameter (N3dHz=size_XI*size_ETA*NpHz)


!
!----------------------------------------------------------------------
! I/O : flag for type sigma vertical transformation
!----------------------------------------------------------------------
!

      real Vtransform
      parameter (Vtransform=2)


!
!----------------------------------------------------------------------
! Number of tracers
!----------------------------------------------------------------------
!

      integer   NT, NTA, itemp, NTot
      integer   ntrc_temp, ntrc_salt, ntrc_pas, ntrc_bio, ntrc_sed
      integer   ntrc_subs, ntrc_substot
      integer   ntrc_mld
!

      parameter (itemp=0)
      parameter (ntrc_temp=0)

      parameter (ntrc_salt=0)

      parameter (ntrc_mld=0)

      parameter (ntrc_pas=0)

      parameter (ntrc_bio=0)



!

      parameter (ntrc_subs=0, ntrc_substot=0)


!

      parameter (ntrc_sed=0)

!
! Total number of active tracers
!
      parameter (NTA=itemp+ntrc_salt)

!
! Total number of tracers
!

      parameter (NT=itemp+ntrc_salt+ntrc_pas+ntrc_bio+ntrc_sed+ntrc_mld)
      parameter (NTot=NT)







      integer NGLS
      parameter(NGLS=2)
      integer itke
      parameter(itke=1)
      integer igls
      parameter(igls=2)




!
!----------------------------------------------------------------------
! Tracer identification indices
!----------------------------------------------------------------------
!

      integer   ntrc_diats, ntrc_diauv, ntrc_diabio
      integer   ntrc_diavrt, ntrc_diaek, ntrc_diapv
      integer   ntrc_diaeddy, ntrc_surf

!




!
! ================  Parameters  =====================
!



!
! ===  BIOLOGY  ===
!

      parameter (ntrc_diabio=0)


!
! === SEDIMENTS ===
!



!
! ===  u,v and tracer equations Diagnostics  ===
!

      parameter (ntrc_diats=0)

      parameter (ntrc_diauv=0)

      parameter (ntrc_diavrt=0)

      parameter (ntrc_diaek=0)

      parameter (ntrc_diapv=0)

      parameter (ntrc_diaeddy=0)

      parameter (ntrc_surf=0)


!
!----------------------------------------------------------------------
! Max time increment for computing bottom stress at the 3D fast time
! steps
!----------------------------------------------------------------------
!

!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!

      real A2d(N2d,NSA,0:NPP-1), A3d(N3d,9,0:NPP-1)
     &    ,A3dHz(N3dHz,4,0:NPP-1)


      common/private_scratch/ A2d,A3d,A3dHz

!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!

  

      real u(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N,3)
      real v(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N,3)
      real t(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N,3,NT)
      common /ocean_u/u /ocean_v/v /ocean_t/t


      real Hz(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real Hz_bak(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real z_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real z_w(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      real Huon(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real Hvom(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      common /grid_Hz_bak/Hz_bak /grid_zw/z_w /grid_Huon/Huon
      common /grid_Hvom/Hvom

      real We(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)

      common /grid_Hz/Hz /grid_zr/z_r /grid_We/We



      real wz(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N,3)
      common /ocean_wz/wz

      real Hzr(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)

      common /grid_Hzr/Hzr




      real rho1(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real rho(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      common /ocean_rho1/rho1 /ocean_rho/rho









!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!

  
      integer chunk_size_X,margin_X,chunk_size_E,margin_E
      integer Istr,Iend,Jstr,Jend, i_X,j_E


      chunk_size_X=(Lmmpi+NSUB_X-1)/NSUB_X
      margin_X=(NSUB_X*chunk_size_X-Lmmpi)/2
      chunk_size_E=(Mmmpi+NSUB_E-1)/NSUB_E
      margin_E=(NSUB_E*chunk_size_E-Mmmpi)/2



      j_E=tile/NSUB_X
      i_X=tile-j_E*NSUB_X

      Istr=1+i_X*chunk_size_X-margin_X
      Iend=Istr+chunk_size_X-1
      Istr=max(Istr,1)
      Iend=min(Iend,Lmmpi)

      Jstr=1+j_E*chunk_size_E-margin_E
      Jend=Jstr+chunk_size_E-1
      Jstr=max(Jstr,1)
      Jend=min(Jend,Mmmpi)



      trd=omp_get_thread_num()

      call gls_mixing_tile ( Istr, Iend, Jstr, Jend,
     &                    A3d(1, 1,trd), A3d(1, 2,trd), A3d(1, 3,trd),
     &                    A3d(1, 4,trd), A3d(1, 5,trd), A2d(1, 2,trd),
     &                    A2d(1, 3,trd), A2d(1, 4,trd), 

     &                    A2d(1, 5,trd),
     &                    A2d(1, 6,trd), A2d(1, 7,trd), A2d(1, 8,trd))

      RETURN
      END
      SUBROUTINE gls_mixing_tile ( Istr, Iend, Jstr, Jend,
     &                          tke_new, gls_new, work, 
     &                          shear2,  vort2,   diss, 
     &                          ustar_sfc_sq,ustar_bot_sq,

     &                                                 DC, FC, CF, RH)



!
!======================================================================
!                 ***  SUBROUTINE  gls_mixing  ***
!
!   Vertical mixing coefficients computed from the gls turbulent
!  closure parameterization (3 schemes: k-epsilon, k-omega, k-gen)
!
! *** References :
!
! Umlauf, L., and H. Burchard, A generic length-scale equation
! for geophysical turbulence models, J. Mar. Res., 61, 235-265, 2003
!
! Umlauf, L., and H. Burchard, Second-order turbulence closure models
!                        Cont. Shelf. Res., 25, 795-827, 2005
!
! Duhaut, T., Notes sur les schemas de turbulence a deux equations,
!                     Technical Report. IFREMER report , 2009
!
! *** History :
!   ! 2016-11 (F. Lemarié) : original code inspired by the Mars3D
!                            implementation by S. Petton, A.-C. Bennis,
!                             T. Duhaut, V. Garnier, F. Dumas
!   ! 2020 (Marchesiello, Benshila): added 3D shear + advection
!                        + wave forcing (Kumar et al COAWST paper 2012)
!   ! 2021 (Marchesiello):  bug fixes (advection, wave forcing
!                                                       (wkb_wwave.F));
!      + revision of parameters (background visc) including for SANDBAR
!      + fix OPENMP parallelization
!
!======================================================================


      IMPLICIT NONE

!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!
!----------------------------------------------------------------------
! Dimensions of Physical Grid and array dimensions
!----------------------------------------------------------------------
!
! LLm,MMm  Number of the internal points of the PHYSICAL grid.
!          in the XI- and ETA-directions [physical side boundary
!          points and peroodic ghost points (if any) are excluded].
!
! Lm,Mm    Number of the internal points [see above] of array
!          covering a Message Passing subdomain. In the case when
!          no Message Passing partitioning is used, these two are
!          the same as LLm,MMm.
!
! N        Number of vertical levels.
!
      integer  LLm,Lm,MMm,Mm,N, LLm0,MMm0

      parameter (LLm0=200,  MMm0=200,  N=8 )   !  1.5 m resolution



      parameter (LLm=LLm0,  MMm=MMm0)


!
!----------------------------------------------------------------------
! Number of layers in Sediment (SL)
!----------------------------------------------------------------------
!
      integer N_sl
      !parameter (N_sl=40)
      parameter (N_sl=0)

!
!----------------------------------------------------------------------
!  related variables
!----------------------------------------------------------------------
!
      integer Lmmpi,Mmmpi,iminmpi,imaxmpi,jminmpi,jmaxmpi
      common /comm_setup_mpi1/ Lmmpi,Mmmpi
      common /comm_setup_mpi2/ iminmpi,imaxmpi,jminmpi,jmaxmpi
!
! Domain subdivision parameters
! ====== =========== ==========
!
! NPP            Maximum allowed number of parallel threads;
! NSUB_X,NSUB_E  Number of SHARED memory subdomains in XI- and
!                                                ETA-directions;
! NNODES        Total number of  processes (nodes);
! NP_XI,NP_ETA  Number of  subdomains in XI- and ETA-directions;
!
      integer NSUB_X, NSUB_E, NPP

      integer NP_XI, NP_ETA, NNODES

      parameter (NP_XI=1,  NP_ETA=4,  NNODES=NP_XI*NP_ETA)

      parameter (NPP=1)
      parameter (NSUB_X=1, NSUB_E=1)


!
!----------------------------------------------------------------------
! Number maximum of weights for the barotropic mode
!----------------------------------------------------------------------
!
      integer NWEIGHT
      parameter (NWEIGHT=1000)

!
!----------------------------------------------------------------------
! Tides
!----------------------------------------------------------------------
!

!
!----------------------------------------------------------------------
! Wetting-Drying
!----------------------------------------------------------------------
!

      real D_wetdry             ! Critical Depth for Drying cells
                                ! ======== ===== === ====== =====

      parameter (D_wetdry=0.05)

!
!----------------------------------------------------------------------
! Minimum water depth above which wave forcing is applied
! (D_wavedry>D_wetdry if  is activated)
!----------------------------------------------------------------------

!
!----------------------------------------------------------------------
! Point sources, Floast, Stations
!----------------------------------------------------------------------
!


!
!----------------------------------------------------------------------
! Derived dimension parameters
!----------------------------------------------------------------------
!
      integer stdout, Np, NpHz, padd_X,padd_E

      parameter (stdout=6)

      parameter (Np=N+1)
      parameter (NpHz=(N+1+N_sl))

      parameter (Lm=(LLm+NP_XI-1)/NP_XI, Mm=(MMm+NP_ETA-1)/NP_ETA)

      parameter (padd_X=(Lm+2)/2-(Lm+1)/2)
      parameter (padd_E=(Mm+2)/2-(Mm+1)/2)



      integer NSA, N2d,N3d,N3dHz, size_XI,size_ETA
      integer se,sse, sz,ssz

      parameter (NSA=35)

      parameter (size_XI=7+(Lm+NSUB_X-1)/NSUB_X)
      parameter (size_ETA=7+(Mm+NSUB_E-1)/NSUB_E)

      parameter (sse=size_ETA/Np, ssz=Np/size_ETA)
      parameter (se=sse/(sse+ssz), sz=1-se)
      parameter (N2d=size_XI*(se*size_ETA+sz*Np))
      parameter (N3d=size_XI*size_ETA*Np)
      parameter (N3dHz=size_XI*size_ETA*NpHz)


!
!----------------------------------------------------------------------
! I/O : flag for type sigma vertical transformation
!----------------------------------------------------------------------
!

      real Vtransform
      parameter (Vtransform=2)


!
!----------------------------------------------------------------------
! Number of tracers
!----------------------------------------------------------------------
!

      integer   NT, NTA, itemp, NTot
      integer   ntrc_temp, ntrc_salt, ntrc_pas, ntrc_bio, ntrc_sed
      integer   ntrc_subs, ntrc_substot
      integer   ntrc_mld
!

      parameter (itemp=0)
      parameter (ntrc_temp=0)

      parameter (ntrc_salt=0)

      parameter (ntrc_mld=0)

      parameter (ntrc_pas=0)

      parameter (ntrc_bio=0)



!

      parameter (ntrc_subs=0, ntrc_substot=0)


!

      parameter (ntrc_sed=0)

!
! Total number of active tracers
!
      parameter (NTA=itemp+ntrc_salt)

!
! Total number of tracers
!

      parameter (NT=itemp+ntrc_salt+ntrc_pas+ntrc_bio+ntrc_sed+ntrc_mld)
      parameter (NTot=NT)







      integer NGLS
      parameter(NGLS=2)
      integer itke
      parameter(itke=1)
      integer igls
      parameter(igls=2)




!
!----------------------------------------------------------------------
! Tracer identification indices
!----------------------------------------------------------------------
!

      integer   ntrc_diats, ntrc_diauv, ntrc_diabio
      integer   ntrc_diavrt, ntrc_diaek, ntrc_diapv
      integer   ntrc_diaeddy, ntrc_surf

!




!
! ================  Parameters  =====================
!



!
! ===  BIOLOGY  ===
!

      parameter (ntrc_diabio=0)


!
! === SEDIMENTS ===
!



!
! ===  u,v and tracer equations Diagnostics  ===
!

      parameter (ntrc_diats=0)

      parameter (ntrc_diauv=0)

      parameter (ntrc_diavrt=0)

      parameter (ntrc_diaek=0)

      parameter (ntrc_diapv=0)

      parameter (ntrc_diaeddy=0)

      parameter (ntrc_surf=0)


!
!----------------------------------------------------------------------
! Max time increment for computing bottom stress at the 3D fast time
! steps
!----------------------------------------------------------------------
!

!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!
! This is include file "mixing.h"
!  ==== == ======= ==== ==========
!

      real visc2_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real visc2_p(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real visc2_sponge_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real visc2_sponge_p(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /mixing_visc2_r/visc2_r /mixing_visc2_p/visc2_p
      common /mixing_visc2_sponge_r/visc2_sponge_r
      common /mixing_visc2_sponge_p/visc2_sponge_p

      real diff2_sponge(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real diff2(-2:Lm+3+padd_X,-2:Mm+3+padd_E,NT)
      common /mixing_diff2_sponge/diff2_sponge
      common /mixing_diff2/diff2

      real visc3d_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      common /mixing_visc3d_r/visc3d_r
      real visc3d_p(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      common /mixing_visc3d_p/visc3d_p



      real Akv(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      real Akt(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N,2)
      common /mixing_Akv/Akv /mixing_Akt/Akt

      real Akv_old(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      real Akt_old(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      common /mixing_Akvold/Akv_old /mixing_Aktold/Akt_old



      real bvf(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      common /mixing_bvf/ bvf





!
! Generic Length Scale
!
      real trb(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N,2,NGLS)
      common /gls_trb/trb
      real Lscale(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      common /gls_lsc/Lscale
      real Eps_gls(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      common /gls_eps/Eps_gls
      integer kbl(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /gls_kbl/ kbl
      real hbl(-2:Lm+3+padd_X,-2:Mm+3+padd_E  )
      common /gls_hbl/ hbl
      real cm0
      common /gls_cm0/ cm0






!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!
! This is include file "scalars.h"
!---------------------------------
!
!  The following common block contains time variables and indices
! for 2D (k-indices) and 3D (n-indices) computational engines. Since
! they are changed together, they are placed into the same cache line
! despite their mixed type, so that only one cachene is being
! invalidated and has to be propagated accross the cluster.
!
! Note that the real values are placed first into the common block
! before the integer variables. This is done to prevent the
! possibility of misallignment of the 8-byte objects in the case
! when an uneven number of 4-byte integers is placed before a 8-byte
! real (in the case when default real size is set to 8bytes).
! Thought misallignment is not formally a violation of fortran
! standard, it may cause performance degradation and/or make compiler
! issue a warning message (Sun, DEC Alpha) or even crash (Alpha).
!
! time        Time since initialization [seconds];
! time_start  Initialization time [seconds];
! tdays       Time since initialization [days];
! dt          Time step for 3D primitive equations [seconds];
! dtfast      Time step for 2D (barotropic) mode [seconds];
!
      real dt, dtfast, time, time2, time_start, tdays, start_time

      integer ndtfast, iic, kstp, krhs, knew, next_kstp

     &      , iif, nstp, nrhs, nnew, nbstep3d



      logical PREDICTOR_2D_STEP
      common /time_indices/  dt,dtfast, time, time2,time_start, tdays,
     &     ndtfast, iic, kstp, krhs, knew, next_kstp,
     &     start_time,

     &                       iif, nstp, nrhs, nnew, nbstep3d,



     &                       PREDICTOR_2D_STEP


!
! Slowly changing variables: these are typically set in the beginning
! of the run and either remain unchanged, or are changing only in
! association with the I/0.
!
! xl, el   Physical size (m) of domain box in the XI-,ETA-directions.
!
! Tcline   Width (m) of surface or bottom boundary layer in which
!          higher vertical resolution is required during stretching.
! theta_s  S-coordinate surface control parameter, [0<theta_s<20].
! theta_b  S-coordinate bottom control parameter, [0<theta_b<1].
! hc       S-coordinate parameter, hc=min(hmin,Tcline).
!
! sc_r     S-coordinate independent variable, [-1 < sc < 0] at
!             vertical RHO-points
! sc_w     S-coordinate independent variable, [-1 < sc < 0] at
!             vertical W-points.
! Cs_r     Set of S-curves used to stretch the vertical coordinate
!             lines that follow the topography at vertical RHO-points.
! Cs_w     Set of S-curves used to stretch the vertical coordinate
!             lines that follow the topography at vertical W-points.
!
! rho0     Boussinesque Approximation Mean density [kg/m^3].
! R0       Background constant density anomaly [kg/m^3] used in
!                                      linear equation of state.
! T0,S0    Background temperature (Celsius) and salinity [PSU]
!                          values used in analytical fields;
! Tcoef    Thermal expansion coefficient in linear EOS;
! Scoef    Saline contraction coefficient in linear EOS;
!
! rdrg     Linear bottom drag coefficient.
! rdrg2    Quadratic bottom drag coefficient.
! Cdb_max  Maximum bottom drag coefficient allowed.
! Cdb_min  Minimum bottom drag coefficient to avoid the
!                law-of-the-wall to extend indefinitely.
! Zobt      Bottom roughness (m).
!
! gamma2   Slipperiness parameter, either 1. (free-slip)
!
! ntstart  Starting timestep in evolving the 3D primitive equations;
!                              usually 1, if not a restart run.
! ntimes   Number of timesteps for the 3D primitive equations in
!                                                    the current run.
! ndtfast  Number of timesteps for 2-D equations between each "dt".
!
! nrst     Number of timesteps between storage of restart fields.
! nwrt     Number of timesteps between writing of fields into
!                                                     history file.
! ninfo    Number of timesteps between print of single line
!                                   information to standard output.
! nsta     Number of timesteps between storage of station data.
! navg     Number of timesteps between storage of time-averaged
!                                                           fields.
! ntsavg   Starting timestep for accumulation of output time-
!                                                 averaged fields.
! nrrec    Counter of restart time records to read from disk,
!                   the last is used as the initial conditions.
!
! ldefhis  Logical switch used to create the history file.
!             If TRUE, a new history file is created. If FALSE,
!             data is appended to an existing history file.
! levsfrc  Deepest level to apply surface momentum stress as
!                                                 bodyforce.
! levbfrc  Shallowest level to apply bottom momentum stress as
!                                                 bodyforce.
! got_tini Logical switch used at initialisation
!              If TRUE, the tracer is present in the initial file
!              If FALSE, the tracer needs an analytical value
!
! got_inised Logical switch used at initialisation  of sediments
!              If TRUE, the sediment var. is in the initial file
!              If FALSE, the sed. var. gets analytical value from file
!
! got_inibed Logical switch used at initialisation of ripple height, length
!              If TRUE, the ripple var. is in the initial file
!              If FALSE, the ripple var. is obtained from file (ifdef also SEDIMENT)
!                        the ripple var. is set in ana_bsedim (ifndef SEDIMENT)
!
      real time_avg, time2_avg, rho0
     &               , rdrg, rdrg2, Cdb_min, Cdb_max, Zobt
     &               , xl, el, visc2, visc4, gamma2

      real  theta_s,   theta_b,   Tcline,  hc

      real  sc_w(0:N), Cs_w(0:N), sc_r(N), Cs_r(N)

      real  rx0, rx1

      real R0,T0,S0, Tcoef, Scoef

      real weight(6,0:NWEIGHT)


      real  x_sponge,   v_sponge

       real  tauT_in, tauT_out, tauM_in, tauM_out

      integer numthreads,     ntstart,   ntimes,  ninfo
     &      , nfast,  nrrec,     nrst,    nwrt

     &                                 , ntsavg,  navg


      logical ldefhis



      common /scalars_main/
     &             time_avg, time2_avg,  rho0,      rdrg,    rdrg2
     &           , Zobt,       Cdb_min,   Cdb_max
     &           , xl, el,    visc2,     visc4,   gamma2

     &           , theta_s,   theta_b,   Tcline,  hc
     &           , sc_w,      Cs_w,      sc_r,    Cs_r
     &           , rx0,       rx1

     &                      , R0,T0,S0,  Tcoef,   Scoef

     &                      , weight

     &                      , x_sponge,   v_sponge

     &                      , tauT_in, tauT_out, tauM_in, tauM_out

     &      , numthreads,     ntstart,   ntimes,  ninfo
     &      , nfast,  nrrec,     nrst,    nwrt

     &                                 , ntsavg,  navg

     &                      , ldefhis



      real Akv_bak
      common /scalars_akv/ Akv_bak

!
!-----------------------------------------------------------------------
! This following common block contains a set of globally accessable
! variables in order to allow information exchange between parallel
! threads working on different subdomains.
!
! Global summation variables are declared with 16 byte precision
! to avoid accumulation of roundoff errors, since roundoff error
! depends on the order of summation, which is undeterministic in
! the case of summation between the parallel threads; not doing so
! would make it impossible to pass an ETALON CHECK test if there is
! a feedback of these sums into the dynamics of the model, such as
! in the case when global mass conservation is enforced.
!
!  One sunny spring day, sometime in 1989 an american tourist, who
! happened to be an attorney, was walking along a Moscow street.
! Because it was the period of 'Perestroika' (which literally means
! 'remodelling'), so that a lot of construction was going on in
! Moscow, dozens of holes and trenches were open on the street. He
! felt into one of them, broke his leg, ended up in a hospital and
! complaining: In my country if a construction firm would not place
! little red flags around the construction zone to warn passers-by
! about the danger, I will sue em for their negligence! The doctor,
! who was performing surgery on his leg replied to him: Did not you
! see the one big red flag above the whole country in the first place?
!
! WARNING: FRAGILE ALIGNMENT SEQUENCE: In the following common block:
! since real objects are grouped in pairs and integer*4 are grouped
! in quartets, it is guaranteed that 16 Byte objects are aligned
! in 16 Byte boundaries and 8 Byte objects are aligned in 8 Byte
! boundaries. Removing or introduction of variables with violation
! of parity, as well as changing the sequence of variables in the
! common block may cause violation of alignment.
!-----------------------------------------------------------------------
!
      logical synchro_flag
      common /sync_flag/ synchro_flag

      integer may_day_flag  ! This is a shared variable among nested grids
      integer tile_count, first_time, bc_count

      common /communicators_i/
     &        may_day_flag, tile_count, first_time, bc_count


      real hmin, hmax, grdmin, grdmax, Cu_min, Cu_max
      common /communicators_r/
     &     hmin, hmax, grdmin, grdmax, Cu_min, Cu_max



      real*8 Cu_Adv3d,  Cu_W, Cu_Nbq_X, Cu_Nbq_Y, Cu_Nbq_Z
      integer i_cx_max, j_cx_max, k_cx_max
      common /diag_vars/ Cu_Adv3d,  Cu_W,
     &        i_cx_max, j_cx_max, k_cx_max
      real*8 volume, avgke, avgpe, avgkp, bc_crss


     &        , avg_vol, avg_rho


      common /communicators_rq/
     &          volume, avgke, avgpe, avgkp, bc_crss

     &        , avg_vol, avg_rho


!
!  The following common block contains process counters and model
! timers. These are used to measure CPU time consumed by different
! parallel threads during the whole run, as well as in various
! parallel regions, if so is needed. These variables are used purely
! for diagnostic/performance measurements purposes and do not affect
! the model results.
!
      real*4 CPU_time(0:31,0:NPP)
      integer proc(0:31,0:NPP),trd_count
      common /timers_roms/CPU_time,proc,trd_count


!
!  related variables
! === ====== =========
!
      logical EAST_INTER2, WEST_INTER2, NORTH_INTER2, SOUTH_INTER2
      logical EAST_INTER, WEST_INTER, NORTH_INTER, SOUTH_INTER
      logical CORNER_SW,CORNER_NW,CORNER_NE,CORNER_SE
      integer mynode, mynode2, ii,jj, p_W,p_E,p_S,p_N, p_SW,p_SE,
     & p_NW,p_NE,NNODES2
      common /comm_setup/ mynode, mynode2, ii,jj, p_W,p_E,p_S,p_N,
     & p_SW,p_SE, p_NW,p_NE, EAST_INTER, WEST_INTER, NORTH_INTER,
     & SOUTH_INTER, EAST_INTER2, WEST_INTER2, NORTH_INTER2, SOUTH_INTER2,
     & CORNER_SW,CORNER_NW,CORNER_NE,CORNER_SE,NNODES2



!
! Physical constants:
! ======== ==========

      real pi, deg2rad, rad2deg
      parameter (pi=3.14159265358979323846, deg2rad=pi/180.,
     &                                      rad2deg=180./pi)
!
! Earth radius [m]; Earth rotation [rad/s]; Acceleration of gravity [m/s^2];
! duration of the day in seconds and its inverse; Julian offset day.

      real Eradius, Erotation, g, day2sec,sec2day, jul_off,
     &     year2day,day2year
      parameter (Eradius=6371315.0,  Erotation=7.292115090e-5,
     &           day2sec=86400., sec2day=1./86400.,
     &           year2day=365.25, day2year=1./365.25,
     &           jul_off=2440000.)
!
! Acceleration of gravity (nondimensional for Soliton problem)
!

      parameter (g=9.81)

!
!  Specific heat [Joules/kg/degC] for seawater, it is approximately
!  4000, and varies only slightly (see Gill, 1982, Appendix 3).
!
      real Cp
      parameter (Cp=3985.0)

      real vonKar
      parameter (vonKar=0.41)
!
!   FillValue (Needed if the FILLVAL key is defined)
!   (See fillvalue.F subroutine)
      real spval
      parameter (spval=-999.0)
      logical mask_val
      parameter (mask_val = .true.)


      ! Local integers
      INTEGER         ::   Istr, Iend, Jstr, Jend
      INTEGER         ::   i,       j,    k, tind, kref
      INTEGER         ::   imin, imax, jmin, jmax
      INTEGER         ::   ig,    ig1,  ig2
      ! Local arrays
      REAL            ::  tke_new     (Istr-2:Iend+2,Jstr-2:Jend+2,0:N  )
      REAL            ::  gls_new     (Istr-2:Iend+2,Jstr-2:Jend+2,0:N  )
      REAL            ::  work        (Istr-2:Iend+2,Jstr-2:Jend+2,0:N  )
      REAL            ::  shear2      (Istr-2:Iend+2,Jstr-2:Jend+2,0:N-1)
      REAL            ::  vort2       (Istr-2:Iend+2,Jstr-2:Jend+2,0:N-1)
      REAL            ::  diss        (Istr-2:Iend+2,1:N-1)
      REAL            ::  ustar_sfc_sq(Istr-2:Iend+2,Jstr-2:Jend+2      )
      REAL            ::  ustar_bot_sq(Istr-2:Iend+2,Jstr-2:Jend+2      )

      REAL            ::  DC          (Istr-2:Iend+2,0:N  )
      REAL            ::  FC          (Istr-2:Iend+2,0:N  )
      REAL            ::  CF          (Istr-2:Iend+2,1:N-1)
      REAL            ::  RH          (Istr-2:Iend+2,1:N-1)

      ! Local scalars
      REAL            ::  cff , cff1 , cff2, cff3m, cff3p
      REAL            ::  invk, invG, Bprod, Sprod, epsilon
      REAL            ::  alpha_n, alpha_m, c_mu, c_mu_prim
      REAL            ::  alpha_n_min, alpha_m_max, cm0inv2, gls
      REAL            ::  flux_top, flux_bot, lgthsc, L_lim, du,dv,dw
      REAL            ::  trb_new, trb_sfc, trb_bot, z0_s, z0_b, gls_min
      REAL            ::  HUon_w, HVom_w, trb_min(2), Denom
!$acc declare create(trb_min)      
      REAL            ::  su_r,sv_r

      ! Parameter values
      REAL, PARAMETER ::  eps_min =  1.0E-12 ! min value for dissipation rate
      REAL, PARAMETER ::  tke_min =  1.0E-10 ! min value for TKE

      REAL, PARAMETER ::  eps     =  1.0E-12 ! min stable stratification
      REAL, PARAMETER ::  nuws    =  0.1E-06 ! background diffusivity
      REAL, PARAMETER ::  nuwm    =  1.0E-06 ! background viscosity

      REAL, PARAMETER ::  galp    =  0.53    ! parameter for Galperin
                                             ! mixing length limitation
      REAL, PARAMETER ::  chk     =  1400./g ! charnock coefficient

      REAL, PARAMETER ::  Zosmin  =  1.e-2   ! min surface roughness length
      REAL, PARAMETER ::  Zobmin  =  1.e-4   ! min bottom  roughness length


      ! Choice of GLS model
      real            :: rp,    rm,    rn              !<-- n,m and p exponents
      real            :: beta1, beta2, beta3m, beta3p  !<-- beta terms for psi equation
      real            :: OneOverSig(2)   !<-- inverse of Schmidt number for tke and psi

      parameter( rp    = -1.0 , rm    = 0.5  , rn     = -1.0           )
      parameter( beta1 = 0.555, beta2 = 0.833, beta3m = -0.6, beta3p = 1.0)
      parameter( OneOverSig = (/ 0.5, 0.5 /) )

      REAL, PARAMETER :: e1 =  3.0 + 1.*rp / rn
      REAL, PARAMETER :: e2 =  1.5 + 1.*rm / rn
      REAL, PARAMETER :: e3 = -1.0 / rn

      ! 9-point isotropic laplacian filter
      REAL, PARAMETER :: smth_a = 1./12.
      REAL, PARAMETER :: smth_b = 3./16.

      REAL, PARAMETER :: lars = 5.e-3*beta2/beta1  ! parameter for Larsen
                                                   ! dissipation limitation



!
!--------------------------------------------------------------------
! Choice of Stability function (Default : Canuto A)
!--------------------------------------------------------------------
!

       REAL ::  c1   ,c2    ,c3    ,c4    ,c5    , c6
       REAL :: cb1   ,cb2   ,cb3   ,cb4   ,cb5   ,cbb
       REAL :: a1    ,a2    ,a3    ,a5    ,nn
       REAL :: ab1   ,ab2   ,ab3   ,ab5   ,nb
       REAL :: sf_d0 ,sf_d1 ,sf_d2 ,sf_d3 ,sf_d4 , sf_d5
       REAL :: sf_n0 ,sf_n1 ,sf_n2
       REAL :: sf_nb0,sf_nb1,sf_nb2
       REAL :: lim_am0,lim_am1,lim_am2,lim_am3,lim_am4,lim_am5,lim_am6

       PARAMETER(c1=5.   ,
     &           c2=0.8  ,
     &           c3=1.968,
     &           c4=1.136,
     &           c5=0.   ,
     &           c6=0.4   )
       PARAMETER(cb1=5.95  ,
     &           cb2=0.6   ,
     &           cb3=1.    ,
     &           cb4=0.    ,
     &           cb5=0.3333,
     &           cbb=0.72   )

       PARAMETER(  a1 = 0.66666666667 - 0.5*c2 )
       PARAMETER(  a2 = 1.            - 0.5*c3 )
       PARAMETER(  a3 = 1.            - 0.5*c4 )
       PARAMETER(  a5 = 0.5           - 0.5*c6 )
       PARAMETER( ab1 = 1. - cb2               )
       PARAMETER( ab2 = 1. - cb3               )
       PARAMETER( ab3 = 2.*(1.-cb4)            )
       PARAMETER( ab5 = 2.*cbb*(1.-cb5)        )
       PARAMETER( nn  = 0.5*c1                 )
       PARAMETER( nb  = cb1                    )
       PARAMETER( sf_d0 = 36.0*nn*nn*nn*nb*nb                           )
       PARAMETER( sf_d1 = 84.0*a5*ab3*nn*nn*nb+36.0*ab5*nn*nn*nn*nb     )
       PARAMETER( sf_d2 = 9.0*(ab2*ab2-ab1*ab1)*nn*nn*nn
     &                  - 12.0*(a2*a2-3.*a3*a3)*nn*nb*nb)
       PARAMETER( sf_d3 = 12.0*a5*ab3*(a2*ab1-3.0*a3*ab2)* nn
     &                    + 12.0*a5*ab3*(    a3*a3-a2*a2)* nb
     &                    + 12.0*   ab5*(3.0*a3*a3-a2*a2)*nn*nb          )
       PARAMETER( sf_d4 = 48.0*a5*a5*ab3*ab3*nn + 36.0*a5*ab3*ab5*nn*nn )
       PARAMETER( sf_d5 = 3.0*(a2*a2-3.0*a3*a3)
     &                       *(ab1*ab1-ab2*ab2)*nn    )
       PARAMETER( sf_n0  = 36.0*a1*nn*nn*nb*nb )
       PARAMETER( sf_n1  = - 12.0*a5*ab3*(ab1+ab2)*nn*nn
     &                    + 8.0*a5*ab3*(6.0*a1-a2-3.0*a3)*nn*nb
     &                    + 36.0*a1*ab5*nn*nn*Nb )
       PARAMETER( sf_n2  = 9.0*a1*(ab2*ab2-ab1*ab1)*nn*nn )
       PARAMETER( sf_nb0 = 12.0*ab3*nn*nn*nn*nb  )
       PARAMETER( sf_nb1 = 12.0*a5*ab3*ab3*nn*nn )
       PARAMETER( sf_nb2 = 9.0*a1*ab3*(ab1-ab2)*nn*nn + ( 6.0*a1*(a2-3.0*a3)
     &                               - 4.0*(a2*a2-3.0*a3*a3) )*ab3 * nn * nb)
       PARAMETER( lim_am0 = sf_d0*sf_n0               )
       PARAMETER( lim_am1 = sf_d0*sf_n1 + sf_d1*sf_n0 )
       PARAMETER( lim_am2 = sf_d1*sf_n1 + sf_d4*sf_n0 )
       PARAMETER( lim_am3 = sf_d4*sf_n1               )
       PARAMETER( lim_am4 = sf_d2*sf_n0               )
       PARAMETER( lim_am5 = sf_d2*sf_n1+sf_d3*sf_n0   )
       PARAMETER( lim_am6 = sf_d3*sf_n1               )



!
!--------------------------------------------------

!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!

  

      real u(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N,3)
      real v(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N,3)
      real t(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N,3,NT)
      common /ocean_u/u /ocean_v/v /ocean_t/t


      real Hz(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real Hz_bak(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real z_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real z_w(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      real Huon(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real Hvom(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      common /grid_Hz_bak/Hz_bak /grid_zw/z_w /grid_Huon/Huon
      common /grid_Hvom/Hvom

      real We(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)

      common /grid_Hz/Hz /grid_zr/z_r /grid_We/We



      real wz(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N,3)
      common /ocean_wz/wz

      real Hzr(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)

      common /grid_Hzr/Hzr




      real rho1(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real rho(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      common /ocean_rho1/rho1 /ocean_rho/rho









!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!
!  This is include file "forces.h"
!--------------------------------------------------------------------
!  SURFACE MOMENTUM FLUX (WIND STRESS):
!--------------------------------------------------------------------
!  sustr |  XI- and ETA-components of kinematic surface momentum flux
!  svstr |  (wind stresses) defined at horizontal U- and V-points.
!            dimensioned as [m^2/s^2].
!
      real sustr(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real svstr(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /forces_sustr/sustr /forces_svstr/svstr




!
!  BOTTOM MOMENTUM FLUX:
!--------------------------------------------------------------------
!  bustr |  XI- and ETA-components of kinematic bottom momentum flux
!  bvstr |  (drag) defined at horizontal U- and V-points [m^2/s^2].
      real bustr(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real bvstr(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /forces_bustr/bustr /forces_bvstr/bvstr

!
!  tbms      Time of surface momentum stresses.
!
!  bustrg |  Two-time level gridded data for XI- and ETA-componets
!  bvstrg |  of kinematic bottom momentum flux.
!
!  bustrp |  Two-time level point data for XI- and ETA-componets
!  bvstrp |  of kinematic bottom momentum flux.
!
      real bustrg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,2)
      real bvstrg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,2)
      common /bmsdat_bustrg/bustrg /bmsdat_bvstrg/bvstrg

      real bms_tintrp(2), bustrp(2),    bvstrp(2), tbms(2)
      real bmsclen, bms_tstart, bms_tend,  tsbms, sclbms
      integer itbms,      bmstid,busid, bvsid,     tbmsindx
      logical bmscycle,   bms_onerec,   lbusgrd,   lbvsgrd
      common /bmsdat1/bms_tintrp, bustrp,       bvstrp,    tbms
      common /bmsdat2/bmsclen, bms_tstart, bms_tend, tsbms, sclbms
      common /bmsdat3/itbms,      bmstid,busid, bvsid,     tbmsindx
      common /bmsdat4/bmscycle,   bms_onerec,   lbusgrd,   lbvsgrd


!
!  SURFACE TRACER FLUXES:
!--------------------------------------------------------------------
!  stflx   Kinematic surface fluxes of tracer type variables at
!          horizontal RHO-points. Physical dimensions [degC m/s] -
!          temperature; [PSU m/s] - salinity.
!
      real stflx(-2:Lm+3+padd_X,-2:Mm+3+padd_E,NT)
      common /forces_stflx/stflx





!
!

!
!  SOLAR SHORT WAVE RADIATION FLUX.
!--------------------------------------------------------------------
!  srflx  Kinematic surface shortwave solar radiation flux
!         [degC m/s] at horizontal RHO-points
!
      real srflx(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /forces_srflx/srflx




!--------------------------------------------------------------------
!  WIND INDUCED WAVES: everything is defined at rho-point
!--------------------------------------------------------------------
! wfrq | BBL/MRL | wind-induced wave frequency [rad/s]
! uorb | BBL     | xi-component  of wave-induced bed orbital velocity [m/s]
! vorb | BBL     | eta-component of wave-induced bed orbital velocity [m/s]
! wdrx | MRL     | cosine of wave direction [non dimension]
! wdre | MRL     | sine of   wave direction [non dimension]
! whrm | MRL     | (RMS) wave height (twice the wave amplitude) [m]
! wepb | MRL     | breaking dissipation rate (\epsilon_b term) [m3/s3]
! wepd | MRL     | frictional dissipation rate (\epsilon_d term) [m3/s3]
! wlm  | MRL     | mean length wave from input data (coupling or forcing)
! wepr | ROLLER  | roller dissipation rate (\epsilon_r term) [m3/s3]
! wbst | MRL/BKPP| frictional dissipation stress (e_d k/sigma) [m2/s2]
!--------------------------------------------------------------------










      integer Nfrq, Ndir

      integer Nfrq0
      parameter (Nfrq0=50, Ndir=31, Nfrq=Nfrq0*Ndir)

      real wf_bry(Nfrq), wk_bry(Nfrq), wa_bry(Nfrq)
      real wd_bry(Nfrq), wa_bry_d(Nfrq), wa_bry_f(Nfrq)
      real wkx_bry(Nfrq), wky_bry(Nfrq)
      real wpha_bry(Nfrq)
      common /wave_maker/ wf_bry, wk_bry, wa_bry
      common /wave_maker_d/ wd_bry, wa_bry_d
      common /wave_maker_f/ wa_bry_f
      common /wave_maker_k/ wkx_bry, wky_bry
      common /wave_maker_pha/ wpha_bry

      real wmaker_amp, wmaker_prd, wmaker_dir
      real wmaker_dsp, wmaker_fsp
      common /wave_maker_par/ wmaker_amp, wmaker_prd, wmaker_dir
      common /wave_maker_par/ wmaker_dsp, wmaker_fsp 
      real coswd,sinwd,coswds,sinwds
      common /wave_maker_cos/ coswd,sinwd,coswds,sinwds

!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!
! This is include file "grid.h": Environmental two-dimensional
! arrays associated with curvilinear horizontal coordinate system.
!
! h       Model topography (bottom depth [m] at RHO-points.)
! dh      Topograhy increment in case of moving bathymetry
! f       Coriolis parameter [1/s].
! fomn    Compound term, f/[pm*pn] at RHO points.
!
! angler  Angle [radians] between XI-axis and the direction
!             to the EAST at RHO-points.
!
! latr    Latitude (degrees_north) at RHO-, U-, and V-points.
! latu
! latv
! lonr    Longitude (degrees_east) at RHO-, U-, and V-points.
! lonu
! lonv
!
! xp      XI-coordinates [m] at PSI-points.
! xr      XI-coordinates (m] at RHO-points.
! yp      ETA-coordinates [m] at PSI-points.
! yr      ETA-coordinates [m] at RHO-points.
!
! pm      Coordinate transformation metric "m" [1/meters]
!              associated with the differential distances in XI.
! pn      Coordinate transformation metric "n" [1/meters]
!               associated with the differential distances in ETA.
! om_u    Grid spacing [meters] in the XI -direction at U-points.
! om_v    Grid spacing [meters] in the XI -direction at V-points.
! on_u    Grid spacing [meters] in the ETA-direction at U-points.
! on_v    Grid spacing [meters] in the ETA-direction at V-points.
!
! dmde    ETA-derivative of inverse metric factor "m", d(1/M)/d(ETA).
! dndx     XI-derivative  of inverse metric factor "n", d(1/N)/d(XI).
!
! pmon_p  Compound term, pm/pn at PSI-points.
! pmon_r  Compound term, pm/pn at RHO-points.
! pmon_u  Compound term, pm/pn at U-points.
! pnom_p  Compound term, pn/pm at PSI-points.
! pnom_r  Compound term, pn/pm at RHO-points.
! pnom_v  Compound term, pn/pm at V-points.
!
! rmask   Land-sea masking arrays at RHO-,U-,V- and PSI-points.
! umask   (rmask,umask,vmask) = (0=Land, 1=Sea);
! vmask
! pmask    pmask=(0=Land, 1=Sea, 1-gamma2 =boundary).
!
! reducu  reduction coefficient along x-axis for rivers sections
! reducv  reduction coefficient along y-axis for rivers sections

      real h(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real hinv(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real f(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real fomn(-2:Lm+3+padd_X,-2:Mm+3+padd_E)

      common /grid_h/h /grid_hinv/hinv /grid_f/f /grid_fomn/fomn





      real xp(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real xr(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real yp(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real yr(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /grid_xr/xr /grid_xp/xp /grid_yp/yp /grid_yr/yr


      real pm(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pn(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real om_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real on_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real om_u(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real on_u(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real om_v(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real on_v(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real om_p(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real on_p(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pn_u(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pm_v(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pm_u(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pn_v(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /metrics_pm/pm    /metrics_pn/pn
      common /metrics_omr/om_r /metrics_on_r/on_r
      common /metrics_omu/om_u /metrics_on_u/on_u
      common /metrics_omv/om_v /metrics_on_v/on_v
      common /metrics_omp/om_p /metrics_on_p/on_p
      common /metrics_pnu/pn_u /metrics_pmv/pm_v
      common /metrics_pmu/pm_u /metrics_pnv/pn_v



      real pmon_p(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pmon_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pmon_u(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pnom_p(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pnom_r(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pnom_v(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real grdscl(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /metrics_pmon_p/pmon_p /metrics_pnom_p/pnom_p
      common /metrics_pmon_r/pmon_r /metrics_pnom_r/pnom_r
      common /metrics_pmon_u/pmon_u /metrics_pnom_v/pnom_v
      common /metrics_grdscl/grdscl




      real rmask_wet(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real pmask_wet(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real umask_wet(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real vmask_wet(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real rmask_wet_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real Dcrit(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real wetdry(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /mask_r_wet/rmask_wet /mask_p_wet/pmask_wet
      common /mask_u_wet/umask_wet /mask_v_wet/vmask_wet
      common /mask_r_wet_avg/rmask_wet_avg
      common /Dcrit_wet/Dcrit
      common /wetdry_wet/wetdry





      real zob(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /Z0B_VAR/zob


!======================================================================
! CROCO is a branch of ROMS developped at IRD, INRIA, 
! Ifremer, CNRS and Univ. Toulouse III  in France
! The two other branches from UCLA (Shchepetkin et al)
! and Rutgers University (Arango et al) are under MIT/X style license.
! CROCO specific routines (nesting) are under CeCILL-C license.
!
! CROCO website : http://www.croco-ocean.org
!======================================================================
!

  

      real zeta_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real ubar_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      real vbar_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_zeta/zeta_avg
     &       /avg_ubar/ubar_avg
     &       /avg_vbar/vbar_avg
      real bostr_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_bostr/bostr_avg
      real bustr_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_bustr/bustr_avg
      real bvstr_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_bvstr/bvstr_avg
      real wstr_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_wstr/wstr_avg
      real sustr_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_sustr/sustr_avg
      real svstr_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_svstr/svstr_avg
      real srflx_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_srflx/srflx_avg

      real u_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real v_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      real t_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N,NT)
      real rho_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)

      real bvf_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)

      real omega_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)

      real w_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)

      common /avg_u/u_avg /avg_v/v_avg /avg_t/t_avg
     &       /avg_rho/rho_avg /avg_omega/omega_avg

     &       /avg_bvf/bvf_avg

     &       /avg_w/w_avg
      real stflx_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,NT)
      common /avg_stflx/stflx_avg
      real btflx_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,NT)
      common /avg_btflx/btflx_avg

      real hbl_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E)
      common /avg_hbl/hbl_avg

      real tke_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      real gls_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      real Lscale_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      common /avg_tke/tke_avg
      common /avg_gls/gls_avg
      common /avg_Lscale/Lscale_avg

      real visc3d_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,N)
      common /avg_visc3d/visc3d_avg

      real Akv_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N)
      real Akt_avg(-2:Lm+3+padd_X,-2:Mm+3+padd_E,0:N,2)
      common /avg_Akv/Akv_avg /avg_Akt/Akt_avg



!! define to move from 2D to 3D







!
!--------------------------------------------------------------------
! Compute extended bounds (necessary because of
!                          the TKE/GLS smoothing)
!--------------------------------------------------------------------
!

      if ((istr.eq.1 .and. .not.WEST_INTER)) then
        imin=Istr
      else
        imin=Istr-1
      endif
      if ((iend.eq.Lmmpi .and. .not.EAST_INTER)) then
        imax=Iend
      else
        imax=Iend+1
      endif

      jmin = Jstr-1
      jmax = Jend+1

!
!--------------------------------------------------------------------
! Initialization of various constants
!--------------------------------------------------------------------
!
! Compute cmu0 and inverse of cmu0 squared
!
      cm0     =  ( (a2*a2 - 3.0*a3*a3 + 3.0*a1*nn)/(3.0*nn*nn) )**0.25
      cm0inv2 = 1./cm0**2
!
! Minimum value of alpha_n to ensure that alpha_m is positive
!
      alpha_n_min = 0.5*( - ( sf_d1 + sf_nb0 )
     &             + sqrt(  ( sf_d1 + sf_nb0 )**2
     &            - 4. * sf_d0 *( sf_d4 + sf_nb1 ) ) )
     &                            / ( sf_d4 + sf_nb1 )
!
! Compute gls_min consistently with eps_min/tke_min
!
      cff     = (cm0**3 )*(tke_min**1.5) / eps_min
      gls_min = (cm0**rp)*(tke_min**rm ) * ( cff**rn )

      trb_min(itke) = tke_min
      trb_min(igls) = gls_min


!
!--------------------------------------------------------------------
! Horizontal advection (first-order upwind)
!--------------------------------------------------------------------
!

!$acc kernels if(compute_on_device) default(present)
!$acc& copyin( trb_min, gls_min, cff, itke )
      

      ig=itke         ! <-- TKE
!$acc loop private(ustar_bot_sq,ustar_sfc_sq)
      DO k=1,N-1
        DO j=jmin,jmax
          DO i=imin,imax+1
            HUon_w = 0.5*(Huon(i,j,k)+Huon(i,j,k+1)) ! umask(i,j)
            ustar_sfc_sq(i,j)=
     &            trb(i-1,j,k,nstp,ig)*max(HUon_w,0.)
     &           +trb(i  ,j,k,nstp,ig)*min(HUon_w,0.)
          ENDDO
        ENDDO
        DO j=jmin,jmax+1
          DO i=imin,imax
            HVom_w = 0.5*(Hvom(i,j,k)+Hvom(i,j,k+1)) ! vmask(i,j)
            ustar_bot_sq(i,j)=
     &            trb(i,j-1,k,nstp,ig)*max(HVom_w,0.)
     &           +trb(i,j  ,k,nstp,ig)*min(HVom_w,0.)
          ENDDO
        ENDDO
        DO j=jmin,jmax
          DO i=imin,imax
            cff    = 2. / ( Hz(i,j,k)+ Hz(i,j,k+1) )
            tke_new(i,j,k)= trb(i,j,k,nstp,ig)
     &                     -dt*cff*pm(i,j)*pn(i,j)
     &                       *(  ustar_sfc_sq(i+1,j)-ustar_sfc_sq(i,j)
     &                         + ustar_bot_sq(i,j+1)-ustar_bot_sq(i,j) )
          ENDDO
        ENDDO
      ENDDO
!
      ig=igls         ! <-- GLS
!$acc loop private(ustar_bot_sq,ustar_sfc_sq)
      DO k=1,N-1
        DO j=jmin,jmax
          DO i=imin,imax+1
            HUon_w = 0.5*(Huon(i,j,k)+Huon(i,j,k+1)) ! umask(i,j)
            ustar_sfc_sq(i,j)=
     &            trb(i-1,j,k,nstp,ig)*max(HUon_w,0.)
     &           +trb(i  ,j,k,nstp,ig)*min(HUon_w,0.)
          ENDDO
        ENDDO
        DO j=jmin,jmax+1
          DO i=imin,imax
            HVom_w = 0.5*(Hvom(i,j,k)+Hvom(i,j,k+1)) ! vmask(i,j)
            ustar_bot_sq(i,j)=
     &            trb(i,j-1,k,nstp,ig)*max(HVom_w,0.)
     &           +trb(i,j  ,k,nstp,ig)*min(HVom_w,0.)
          ENDDO
        ENDDO
        DO j=jmin,jmax
          DO i=imin,imax
            cff    = 2. / ( Hz(i,j,k)+ Hz(i,j,k+1) )
            gls_new(i,j,k)= trb(i,j,k,nstp,ig)
     &                     -dt*cff*pm(i,j)*pn(i,j)
     &                       *(  ustar_sfc_sq(i+1,j)-ustar_sfc_sq(i,j)
     &                         + ustar_bot_sq(i,j+1)-ustar_bot_sq(i,j) )
          ENDDO
        ENDDO
      ENDDO


!
!--------------------------------------------------------------------
! Vertical advection (first-order upwind)
!--------------------------------------------------------------------
!

      ig=itke         ! <-- TKE
      DO j=jmin,jmax
        DO k=1,N
          DO i=imin,imax
            cff=0.5*(We(i,j,k)+We(i,j,k-1))
            FC(i,k)=trb(i,j,k-1,nstp,ig)*max(cff,0.)
     &             +trb(i,j,k  ,nstp,ig)*min(cff,0.)
          ENDDO
        ENDDO
        DO k=1,N-1
          DO i=imin,imax
            cff=2./(Hz(i,j,k)+Hz(i,j,k+1))
            tke_new(i,j,k)= tke_new(i,j,k)
     &                     -dt*cff*pm(i,j)*pn(i,j)
     &                        *(FC(i,k+1)-FC(i,k))
          ENDDO
        ENDDO
      ENDDO
!
      ig=igls         ! <-- GLS
      DO j=jmin,jmax
        DO k=1,N
          DO i=imin,imax
            cff=0.5*(We(i,j,k)+We(i,j,k-1))
            FC(i,k)=trb(i,j,k-1,nstp,ig)*max(cff,0.)
     &             +trb(i,j,k  ,nstp,ig)*min(cff,0.)
          ENDDO
        ENDDO
        DO k=1,N-1
          DO i=imin,imax
            cff=2./(Hz(i,j,k)+Hz(i,j,k+1))
            gls_new(i,j,k)= gls_new(i,j,k)
     &                     -dt*cff*pm(i,j)*pn(i,j)
     &                        *(FC(i,k+1)-FC(i,k))
          ENDDO
        ENDDO
      ENDDO

!
!--------------------------------------------------------------------
!  Compute the vertical shear (or complete deformation rate D)
!--------------------------------------------------------------------
!
!    D^2 = 2 DijDij      -- Dij = 0.5*(dui/dxj + duj/dxi) --
!        = (dudz + dwdx)^2 + (dvdz + dwdy)^2 + (dvdx + dudy)^2
!          + 2 dudx^2 + 2 dvdy^2 + 2 dwdz^2
!
!  Also compute enstrophy to identify nearly potential flow regions
!  (Larsen & Fuhrman, 2018) :
!    V^2 = 2 VijVij      -- Vij = 0.5*(dui/dxj - duj/dxi) --
!        = (dudz - dwdx)^2 + (dvdz - dwdy)^2 + (dvdx - dudy)^2
!--------------------------------------------------------------------
!
      tind  = nrhs
!---$acc kernels if(compute_on_device) default(present)
      DO k=1,N-1
         DO j=jmin,jmax
            DO i=imin,imax
               cff = 1. / ( Hz( i, j, k ) + Hz( i, j, k+1 ) )
               du  = cff*( u(i, j, k+1,tind)+u(i+1, j, k+1,tind)     ! dudz
     &                    -u(i, j, k  ,tind)-u(i+1, j, k  ,tind))
               dv  = cff*( v(i, j, k+1,tind)+v(i, j+1, k+1,tind)     ! dvdz
     &                    -v(i, j, k  ,tind)-v(i, j+1, k  ,tind))


               dw  = 0.5*pm(i,j)
     &                  *( wz(i+1,j,k,tind)-wz(i-1,j,k,tind))        ! dwdx
               shear2(i,j,k) = (du+dw)*(du+dw)

               vort2(i,j,k)  = (du-dw)*(du-dw)

               dw  = 0.5*pn(i,j)
     &                  *( wz(i,j+1,k,tind)-wz(i,j-1,k,tind))        ! dwdy
               shear2(i,j,k) = shear2(i,j,k) + (dv+dw)*(dv+dw)

               vort2(i,j,k)  = vort2(i,j,k)  + (dv-dw)*(dv-dw)

               du  = 0.5*pm(i,j)
     &                  *( u(i+1, j, k+1,tind)-u(i, j, k+1,tind)     ! dudx
     &                    +u(i+1, j, k  ,tind)-u(i, j, k  ,tind))
               dv  = 0.5*pn(i,j)
     &                  *( v(i, j+1, k+1,tind)-v(i, j, k+1,tind)     ! dvdy
     &                    +v(i, j+1, k  ,tind)-v(i, j, k  ,tind))

               dw  = cff*( wz(i,j,k+1,tind)-wz(i,j,k-1,tind))        ! dwdz

               shear2(i,j,k) = shear2(i,j,k) +
     &                         2.*(du*du + dv*dv + dw*dw)
               du  = 0.125*pn(i,j)*
     &                        (u(i,j+1,k  ,tind)+u(i+1,j+1,k  ,tind) ! dudy
     &                        -u(i,j-1,k  ,tind)-u(i+1,j-1,k  ,tind)
     &                        +u(i,j+1,k+1,tind)+u(i+1,j+1,k+1,tind)
     &                        -u(i,j-1,k+1,tind)-u(i+1,j-1,k+1,tind))
               dv  = 0.125*pm(i,j)*
     &                        (v(i+1,j,k  ,tind)+v(i+1,j+1,k  ,tind) ! dvdx
     &                        -v(i-1,j,k  ,tind)-v(i-1,j+1,k  ,tind)
     &                        +v(i+1,j,k+1,tind)+v(i+1,j+1,k+1,tind)
     &                        -v(i-1,j,k+1,tind)-v(i-1,j+1,k+1,tind))
               shear2(i,j,k) = (du+dv)*(du+dv) + shear2(i,j,k)

               vort2(i,j,k)  = vort2(i,j,k)  + (dv-du)*(dv-du)

           ENDDO
         ENDDO
      ENDDO
!--------------------------------------------------------------------
!  Compute ustar squared at the surface and at the bottom
!--------------------------------------------------------------------
!
      DO j=jmin,jmax
         DO i=imin,imax

            su_r=0.5*(sustr(i,j)+sustr(i+1,j))
            sv_r=0.5*(svstr(i,j)+svstr(i,j+1))

            ustar_sfc_sq( i, j ) = sqrt(su_r**2+sv_r**2)

            ustar_bot_sq( i, j ) =
     &                        sqrt( (0.5*(bustr(i,j)+bustr(i+1,j)))**2
     &                             +(0.5*(bvstr(i,j)+bvstr(i,j+1)))**2 )
         ENDDO
      ENDDO

      !--------------------------------------------------
!$acc loop private(diss) 
      DO j=jmin,jmax         !<-- j-outer loop
      !--------------------------------------------------

         ! Compute the dissipation rate
         DO i=imin,imax
            DO k=1,N-1
               cff       = (cm0**e1) * ( trb( i,j,k,nstp,itke )**e2 )
     &                               * ( trb( i,j,k,nstp,igls )**e3 )
               diss(i,k) = MAX( cff , eps_min )
            ENDDO
         ENDDO !<-- terminate i-loop

         !--------------------------------------------------
!!$acc loop private(gls_new,tke_new,dc,rh,fc,cf) 
         DO ig = 1,ngls     ! ig = 2 for gls and = 1 for tke
         !--------------------------------------------------

            ! Off-diagonal terms for the tridiagonal problem
            cff=-0.5*dt
            DO k=2,N-1
               DO i=imin,imax
                  FC(i,k)= cff* OneOverSig(ig)*
     &                   ( Akv_old(i,j,k)+Akv_old(i,j,k-1) ) / Hz(i,j,k) 

               ENDDO
            ENDDO

            DO i=imin,imax
               FC(i,1)=0.
               FC(i,N)=0.
            ENDDO

            ! Production/Dissipation terms and diagonal term
            DO k=1,N-1
               DO i=imin,imax
                  ig1   = (igls-ig)
                  ig2   = (ig-itke)
                  invk  =     1. / trb( i,j,k,nstp,itke )
                  gls   =          trb( i,j,k,nstp,igls )
                  ! invG = 1/tke for tke ; invG = 1/psi for gls
                  invG  =  ig1*invk+ig2*(1./gls)
                  cff1  =  ig1+ig2*beta1   * invk*gls
                  cff2  = (ig1+ig2*beta2 ) * invk
                  cff3m =  ig1+ig2*beta3m  * invk*gls
                  cff3p =  ig1+ig2*beta3p  * invk*gls
                  ! Shear and buoyancy production
                  Sprod =  cff1*Akv_old(i,j,k) * shear2(i,j,k) 

                  Bprod = 0.

                  ! Patankar trick to ensure non-negative solutions
                  cff   =       0.5*(Hz(i,j,k)+Hz(i,j,k+1)) 


                  IF( ig == itke ) THEN
                    trb_new=tke_new(i,j,k)
                  ELSE
                    trb_new=gls_new(i,j,k)
                  ENDIF
                  IF( (Bprod + Sprod) .gt. 0.) THEN
                     RH(i,k) = cff*( trb_new + dt*(Bprod+Sprod) )
                     DC(i,k) = cff*(1.+dt*cff2*diss(i,k))
     &                                                -FC(i,k)-FC(i,k+1)
                  ELSE
                     RH(i,k) = cff*( trb_new + dt*Sprod  )
                     DC(i,k) = cff*(1.+dt*(cff2*diss(i,k)
     &                              -invG*Bprod)) - FC(i,k) - FC(i,k+1)
                  ENDIF
               ENDDO
            ENDDO

            ! Boundary conditions
            IF( ig == itke ) THEN
               DO i=imin,imax
                  ! surface

                  trb_sfc = MAX( tke_min, cm0inv2*ustar_sfc_sq(i,j) )
                  flux_top = 0.

                  ! bottom
                  trb_bot = MAX( tke_min, cm0inv2*ustar_bot_sq(i,j) )
                  flux_bot = 0.
                  ! finalize
                  RH(i,1) = RH(i,1) + dt*flux_bot
                  RH(i,N-1) = RH(i,N-1) + dt*flux_top
                  tke_new(i,j,N) = trb_sfc
                  tke_new(i,j,0) = trb_bot
               ENDDO
            ELSE
               DO i=imin,imax
                  ! surface

                  z0_s=MAX( Zosmin , chk*ustar_sfc_sq(i,j) )   !<-- Charnock

                  cff = 0.5*(tke_new(i,j,N-1)+tke_new(i,j,N))
                  lgthsc = vonKar*(0.5*Hz(i,j,N)+z0_s)
                  trb_sfc = MAX(gls_min,(cm0**rp)*(lgthsc**rn)
     &                                              *(cff**rm))
                  flux_top = -rn*cm0**(rp+1.)
     &                             *vonKar*OneOverSig(igls)
     &                             *(cff**(rm+0.5))*(lgthsc**rn)

                  ! bottom

                  z0_b = MAX( Zob(i,j) , Zobmin )

                  cff = 0.5*(tke_new(i,j,1)+tke_new(i,j,0))
                  lgthsc = vonKar*(0.5*Hz(i,j,1)+z0_b)
                  trb_bot = MAX(gls_min,(cm0**rp)*(lgthsc**rn)
     &                                   *(tke_new(i,j,0)**rm))
                  flux_bot =-rn*cm0**(rp+1.)
     &                          *vonKar*OneOverSig(igls)
     &                          *(cff**(rm+0.5))*(lgthsc**rn)
                  ! finalize
                  RH(i,1) = RH(i,1) + dt*flux_bot
                  RH(i,N-1) = RH(i,N-1) + dt*flux_top
                  gls_new(i,j,N) = trb_sfc
                  gls_new(i,j,0) = trb_bot
               ENDDO
            ENDIF

            ! tridiagonal resolution
            DO i=imin,imax
               cff       =  1./DC(i,N-1)
               CF(i,N-1) = cff*FC(i,N-1)
               RH(i,N-1) = cff*RH(i,N-1)
            ENDDO
            DO k=N-2,1,-1
               DO i=imin,imax
                  cff     =   1./(DC(i,k)-CF(i,k+1)*FC(i,k+1))
                  CF(i,k) = cff*FC(i,k)
                  RH(i,k) = cff*( RH(i,k)-FC(i,k+1)*RH(i,k+1))
               ENDDO
            ENDDO
            IF( ig == itke ) THEN
              DO i=imin,imax
                tke_new(i,j,1) = MAX( RH(i,1), trb_min(ig) )
              ENDDO
              DO k=2,N-1
                DO i=imin,imax
                  RH(i,k) = RH(i,k)-CF(i,k)*RH(i,k-1)
                  tke_new(i,j,k) = MAX( RH(i,k), trb_min(ig) )
                ENDDO
              ENDDO
            ELSE
              DO i=imin,imax
                gls_new(i,j,1) = MAX( RH(i,1), trb_min(ig) )
              ENDDO
              DO k=2,N-1
                DO i=imin,imax
                  RH(i,k) = RH(i,k)-CF(i,k)*RH(i,k-1)
                  gls_new( i,j,k) = MAX( RH(i,k), trb_min(ig) )
                ENDDO
              ENDDO
            ENDIF

         !--------------------------------------------------
         ENDDO     ! ig loop
         !--------------------------------------------------

      !--------------------------------------------------
      ENDDO     ! j loop
      !--------------------------------------------------
!$acc end kernels
!$acc kernels if(compute_on_device) default(present)
!
!--------------------------------------------------------------------
!    GLS Smoothing
!--------------------------------------------------------------------
!

      ig = igls

      DO k=0,N


      if ((istr.eq.1 .and. .not.WEST_INTER)) then
        do j=Jstr-1,Jend+1
          gls_new(Istr-1,j,k)=gls_new(Istr,j,k)
        enddo
      endif
      if ((iend.eq.Lmmpi .and. .not.EAST_INTER)) then
        do j=Jstr-1,Jend+1
          gls_new(Iend+1,j,k)=gls_new(Iend,j,k)
        enddo
      endif


         DO j=jstr-1,jend+1
            DO i=istr,iend+1
               ustar_sfc_sq (i,j  )=( gls_new(i  ,j,k)
     &                   -  gls_new(i-1,j,k) )

            ENDDO
         ENDDO
         DO j=jstr,jend+1
            DO i=istr-1,iend+1
               work(i,j,0)=( gls_new(i,j  ,k)
     &                    - gls_new(i,j-1,k) )

            ENDDO
            DO i=istr,iend
              ustar_bot_sq(i,j)=work(i,j,0)
     &                + smth_a*( ustar_sfc_sq(i+1,j)+ustar_sfc_sq(i  ,j-1)
     &                          -ustar_sfc_sq(i  ,j)-ustar_sfc_sq(i+1,j-1))
            ENDDO
         ENDDO

         DO j=jstr,jend
            DO i=istr,iend+1
              ustar_sfc_sq(i,j)=ustar_sfc_sq(i,j  )
     &                + smth_a*( work(i,j+1,0)+work(i-1,j  ,0)
     &                          -work(i,j  ,0)-work(i-1,j+1,0))
            ENDDO
            DO i=istr,iend
               trb(i,j,k,nnew,ig)=gls_new(i,j,k)
     &                        + smth_b*( ustar_sfc_sq(i+1,j)-ustar_sfc_sq(i,j)
     &                                  +ustar_bot_sq(i,j+1)-ustar_bot_sq(i,j) )

            ENDDO
         ENDDO              !--> discard ustar_sfc_sq,ustar_bot_sq,work

      ENDDO



        ig = itke

      DO k=0,N


      if ((istr.eq.1 .and. .not.WEST_INTER)) then
        do j=Jstr-1,Jend+1
          tke_new(Istr-1,j,k)=tke_new(Istr,j,k)
        enddo
      endif
      if ((iend.eq.Lmmpi .and. .not.EAST_INTER)) then
        do j=Jstr-1,Jend+1
          tke_new(Iend+1,j,k)=tke_new(Iend,j,k)
        enddo
      endif


         DO j=jstr-1,jend+1
            DO i=istr,iend+1
               ustar_sfc_sq (i,j  )=( tke_new(i  ,j,k)
     &                   -  tke_new(i-1,j,k) )

            ENDDO
         ENDDO
         DO j=jstr,jend+1
            DO i=istr-1,iend+1
               work(i,j,0)=( tke_new(i,j  ,k)
     &                    - tke_new(i,j-1,k) )

            ENDDO
            DO i=istr,iend
              ustar_bot_sq(i,j)=work(i,j,0)
     &                + smth_a*( ustar_sfc_sq(i+1,j)+ustar_sfc_sq(i  ,j-1)
     &                          -ustar_sfc_sq(i  ,j)-ustar_sfc_sq(i+1,j-1))
            ENDDO
         ENDDO

         DO j=jstr,jend
            DO i=istr,iend+1
              ustar_sfc_sq(i,j)=ustar_sfc_sq(i,j  )
     &                + smth_a*( work(i,j+1,0)+work(i-1,j  ,0)
     &                          -work(i,j  ,0)-work(i-1,j+1,0))
            ENDDO
            DO i=istr,iend
               trb(i,j,k,nnew,ig)=tke_new(i,j,k)
     &                        + smth_b*( ustar_sfc_sq(i+1,j)-ustar_sfc_sq(i,j)
     &                                  +ustar_bot_sq(i,j+1)-ustar_bot_sq(i,j) )

            ENDDO
         ENDDO              !--> discard ustar_sfc_sq,ustar_bot_sq,work

      ENDDO



!$acc end kernels
!
!--------------------------------------------------------------------
!    Compute Akv & Lscale
!--------------------------------------------------------------------
!
!$acc kernels if(compute_on_device) default(present)
      !--------------------------------------------------
      DO j=jstr,jend  !<-- j-outer loop
      !--------------------------------------------------
         DO k=1,N-1
            DO i=istr,iend
               !
               ! Galperin limitation : l <= l_lim
               L_lim = galp * sqrt( 2.* trb(i,j,k,nnew,itke)) /
     &                            ( sqrt(max(eps, bvf(i,j,k)))  )
               !
               ! Limitation on psi (use MAX because rn is negative)
               cff = (cm0**rp)*(L_lim**rn)*(trb(i,j,k,nnew,itke)**rm)
               trb( i,j,k,nnew,igls ) = MAX( trb( i,j,k,nnew,igls ),cff)
               !
               ! Dissipation rate epsilon
               epsilon = (cm0**e1) * ( trb( i,j,k,nnew,itke )**e2 )
     &                             * ( trb( i,j,k,nnew,igls )**e3 )
               !
               ! Limitation of epsilon

               ! increase diss in potential flow (Larsen & Fuhrman, 2018)
               cff = lars * (shear2(i,j,k)/MAX(vort2(i,j,k),1.e-10))**2
               epsilon = MAX(epsilon, cff*epsilon)

               epsilon = MAX(epsilon, eps_min)
               !
               ! Compute alpha_n and alpha_m
               cff     = ( trb(i,j,k,nnew,itke)/epsilon )**2
               alpha_m     = cff*  shear2(i,j,k)
               alpha_n     = cff*     bvf(i,j,k)
               !
               ! Limitation of alpha_n and alpha_m
               alpha_n     = MIN(  MAX( 0.73*alpha_n_min , alpha_n ) , 1.0e10 )
               alpha_m_max = ( lim_am0 + lim_am1 * alpha_n
     &                                 + lim_am2 * alpha_n**2
     &                                 + lim_am3 * alpha_n**3) /
     &                         ( lim_am4 + lim_am5 * alpha_n
     &                                   + lim_am6 * alpha_n**2 )
               alpha_m = MIN(alpha_m , alpha_m_max)
               !
               ! Compute stability functions
               Denom = sf_d0  + sf_d1*alpha_n +  sf_d2*alpha_m
     &                        + sf_d3*alpha_n*alpha_m
     &                        + sf_d4*alpha_n**2 + sf_d5*alpha_m**2
               c_mu      = (sf_n0  + sf_n1*alpha_n  + sf_n2*alpha_m)
     &                                                        /Denom
               c_mu_prim = (sf_nb0 + sf_nb1*alpha_n + sf_nb2*alpha_m)
     &                                                        /Denom
               !
               ! Finalize the computation of Akv and Akt
               cff = trb( i,j,k,nnew,itke )**2 / epsilon
               Akv(i,j,k) = MAX( cff*c_mu , nuwm ) ! rmask(i,j)

               !
               ! Computate and store Lscale and epsilon
               Lscale( i, j , k ) =  cm0 * cm0 * cm0 * cff
     &                              / sqrt( trb( i,j,k,nnew,itke ) )
     &                                             ! rmask(i,j)
               Eps_gls(i,j,k) = epsilon ! rmask(i,j)
            ENDDO
         ENDDO

         DO i=istr,iend
           Akv(i,j,N) = MAX( 1.5*Akv(i,j,N-1)
     &                      -0.5*Akv(i,j,N-2), nuwm)
           Akv(i,j,0) = MAX( 1.5*Akv(i,j,  1)
     &                      -0.5*Akv(i,j,  2), nuwm)

         ENDDO
      !--------------------------------------------------
      ENDDO  !<-- end j-outer loop
      !--------------------------------------------------

!
!------------------------------------------------
!  Apply boundary conditions
!------------------------------------------------
!

      if ((istr.eq.1 .and. .not.WEST_INTER)) then
        do j=jstr,jend
          do k=0,N
            trb(istr-1,j,k,nnew,itke)=trb(istr,j,k,nnew,itke)
            trb(istr-1,j,k,nnew,igls)=trb(istr,j,k,nnew,igls)
            Akv(istr-1,j,k      )=Akv(istr,j,k      )

          enddo
        enddo
      endif
      if ((iend.eq.Lmmpi .and. .not.EAST_INTER)) then
        do j=jstr,jend
          do k=0,N
            trb(iend+1,j,k,nnew,itke)=trb(iend,j,k,nnew,itke)
            trb(iend+1,j,k,nnew,igls)=trb(iend,j,k,nnew,igls)
            Akv(iend+1,j,k      )=Akv(iend,j,k      )

          enddo
        enddo
      endif


!
!  Compute mixed layer depth
!
      do j=Jstr,Jend
        do i=Istr,Iend
          kbl(i,j)=1
          hbl(i,j)=z_w(i,j,N)-z_r(i,j,1)

        enddo
      enddo
      kref=max(1,N-3)
      do k=1,kref
        do j=Jstr,Jend
          do i=Istr,Iend
            cff=rho1(i,j,k)-rho1(i,j,kref)
            if (cff.gt.0.01) then
              kbl(i,j)=k
              hbl(i,j)=z_w(i,j,N)-z_r(i,j,k)

            endif
          enddo
        enddo
      enddo
!$acc end kernels

!
! Exchange computational margines and/or periodic boundaries:
!--------- ------------- -------- ------ -------- -----------
!

      call exchange_w3d_tile (Istr,Iend,Jstr,Jend,
     &                        trb(-2,-2,0,nnew,itke))
      call exchange_w3d_tile (Istr,Iend,Jstr,Jend,
     &                        trb(-2,-2,0,nnew,igls))
      call exchange_w3d_tile (Istr,Iend,Jstr,Jend, Akv)

      call exchange_w3d_tile (Istr,Iend,Jstr,Jend,
     &                        Lscale(-2,-2,0))
!      call exchange_w3d_tile (Istr,Iend,Jstr,Jend,
!     &                        Eps_gls(-2,-2,0))

!======================================================================
      return
      end
!======================================================================

